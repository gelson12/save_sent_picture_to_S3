 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3  docker run -d -p 4566:4566 -p 4571:4571 localstack/localstack
Unable to find image 'localstack/localstack:latest' locally
latest: Pulling from localstack/localstack
d0b609e4bacb: Pulling fs layer                                                                                       
483d0dd37518: Pulling fs layer                                                                                       
02a5d22e0d6f: Pulling fs layer                                                                                       
471797cdda8c: Pulling fs layer                                                                                       
264a1f9cb317: Pulling fs layer                                                                                       
264a1f9cb317: Waiting                                                                                                
502028993969: Waiting                                                                                                
810649ead676: Pulling fs layer                                                                                       
4f4fb700ef54: Pull complete
e5d07f542ec3: Pull complete
30df4eb2d51c: Pull complete
20a068269510: Pull complete
a4ac6325b63c: Pull complete
29125621bf32: Pull complete
37948cc888ba: Pull complete
58f2f5a6b47a: Pull complete
3f3633d65b82: Pull complete
e7274bc04b02: Pull complete
3c465e03a5fc: Pull complete
6b01cdff5e55: Pull complete
59eabaeb952b: Pull complete
ecfb005a4164: Pull complete
1153355390ee: Pull complete
ce98c06d3e65: Pull complete
Digest: sha256:996c61b13801f9a0f539550ce5364b821c95e1bfb691b37a329d0ef4f2dcc362
Status: Downloaded newer image for localstack/localstack:latest
15a3c07b25578898366059909bee4de8f00529f174ac9575a34519965470915f
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3                                          ✔  Ubu  19:22:56 
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3  curl http://localhost:4566/_localstack/health

{"services": {"acm": "available", "apigateway": "available", "cloudformation": "available", "cloudwatch": "available", "config": "available", "dynamodb": "available", "dynamodbstreams": "available", "ec2": "available", "es": "available", "events": "available", "firehose": "available", "iam": "available", "kinesis": "available", "kms": "available", "lambda": "available", "logs": "available", "opensearch": "available", "redshift": "available", "resource-groups": "available", "resourcegroupstaggingapi": "available", "route53": "available", "route53resolver": "available", "s3": "running", "s3control": "available", "scheduler": "available", "secretsmanager": "available", "ses": "available", "sns": "available", "sqs": "available", "ssm": "available", "stepfunctions": "available", "sts": "available", "support": "available", "swf": "available", "transcribe": "available"}, "edition": "community", "version": "4.6.1.dev19"}#         
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3     
 
 based on the services i can tell  LocalStack is running properly.

 now i am going to 

 terraform init

 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?  terraform validate       1 ↵  Ubu  20:18:20 

╷
│ Warning: Argument is deprecated
│ 
│   with aws_api_gateway_deployment.dummy_deployment,
│   on outputs.tf line 6, in resource "aws_api_gateway_deployment" "dummy_deployment":
│    6:   stage_name  = "dev"
│ 
│ stage_name is deprecated. Use the aws_api_gateway_stage resource instead.
╵
╷
│ Warning: Deprecated attribute
│ 
│   on outputs.tf line 10, in output "api_gateway_invoke_url":
│   10:   value = "${aws_api_gateway_deployment.dummy_deployment.invoke_url}/upload"
│
│ The attribute "invoke_url" is deprecated. Refer to the provider documentation for details.
╵
Success! The configuration is valid, but there were some validation warnings as shown above.


/mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?  docker run -d \           ✔  Ubu  10:05:47 
  -p 4566:4566 -p 4571:4571 \
  -e SERVICES=lambda,s3,iam,apigateway,ec2 \
  -e DOCKER_HOST=unix:///var/run/docker.sock \
  -v /var/run/docker.sock:/var/run/docker.sock \
  localstack/localstack
7523fb45626354a0c967aa11d7a1ff75d1c81fdf91cecef5a050b64101b0ca1b
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?  docker ps                 ✔  Ubu  10:05:52 
CONTAINER ID   IMAGE                   STATUS                    NAMES
7523fb456263   localstack/localstack   Up 32 seconds (healthy)   trusting_perlman

/mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?  docker run -d \           ✔  Ubu  10:05:47 
  -p 4566:4566 -p 4571:4571 \
  -e SERVICES=lambda,s3,iam,apigateway,ec2 \
  -e DOCKER_HOST=unix:///var/run/docker.sock \
  -v /var/run/docker.sock:/var/run/docker.sock \
  localstack/localstack
7523fb45626354a0c967aa11d7a1ff75d1c81fdf91cecef5a050b64101b0ca1b
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?  docker ps                 ✔  Ubu  10:05:52 
CONTAINER ID   IMAGE                   STATUS                    NAMES
7523fb456263   localstack/localstack   Up 32 seconds (healthy)   trusting_perlman
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?  docker exec -it 7523fb456263 docker ps
OCI runtime exec failed: exec failed: unable to start container process: exec: "docker": executable file not found in $PATH: unknown
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?  terraform apply -auto-approve

aws_vpc.dummy_vpc: Refreshing state... [id=vpc-6f66b5dcc74079ff2]
aws_s3_bucket.dummy_bucket: Refreshing state... [id=dummy-s3-bucket]
aws_iam_role.dummy_lambda_role: Refreshing state... [id=dummy_lambda_role]
aws_api_gateway_rest_api.dummy_api: Refreshing state... [id=5iisi7tpzg]
aws_iam_policy_attachment.lambda_s3_policy_attachment: Refreshing state... [id=lambda_s3_policy_attachment]
aws_security_group.lambda_sg: Refreshing state... [id=sg-368e447cb221e6f93]
aws_subnet.private_subnet: Refreshing state... [id=subnet-8795bd2b20cec05ba]
aws_lambda_function.dummy_lambda: Refreshing state... [id=dummy_lambda]
aws_api_gateway_resource.dummy_resource: Refreshing state... [id=5wzahpzbqu]
aws_api_gateway_method.dummy_method: Refreshing state... [id=agm-5iisi7tpzg-5wzahpzbqu-POST]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the last "terraform apply" which may have  
affected this plan:

  # aws_api_gateway_method.dummy_method has been deleted
  - resource "aws_api_gateway_method" "dummy_method" {
      - http_method          = "POST" -> null
        id                   = "agm-5iisi7tpzg-5wzahpzbqu-POST"
        # (7 unchanged attributes hidden)
    }

  # aws_api_gateway_resource.dummy_resource has been deleted
  - resource "aws_api_gateway_resource" "dummy_resource" {
      - id          = "5wzahpzbqu" -> null
        # (4 unchanged attributes hidden)
    }

  # aws_api_gateway_rest_api.dummy_api has been deleted
  - resource "aws_api_gateway_rest_api" "dummy_api" {
      - execution_arn                = "arn:aws:execute-api:us-east-1::5iisi7tpzg" -> null
      - id                           = "5iisi7tpzg" -> null
        name                         = "dummy_api_gateway"
      - root_resource_id             = "ia6t5m08lh" -> null
        tags                         = {}
        # (7 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

  # aws_iam_role.dummy_lambda_role has been deleted
  - resource "aws_iam_role" "dummy_lambda_role" {
      - arn                   = "arn:aws:iam::000000000000:role/dummy_lambda_role" -> null
        id                    = "dummy_lambda_role"
      - name                  = "dummy_lambda_role" -> null
        tags                  = {}
        # (8 unchanged attributes hidden)
    }

  # aws_lambda_function.dummy_lambda has been deleted
  - resource "aws_lambda_function" "dummy_lambda" {
      - function_name                  = "dummy_lambda" -> null
        id                             = "dummy_lambda"
        # (10 unchanged attributes hidden)

        # (2 unchanged blocks hidden)
    }

  # aws_s3_bucket.dummy_bucket has been deleted
  - resource "aws_s3_bucket" "dummy_bucket" {
      - bucket                      = "dummy-s3-bucket" -> null
        id                          = "dummy-s3-bucket"
        tags                        = {}
        # (9 unchanged attributes hidden)

        # (3 unchanged blocks hidden)
    }

  # aws_security_group.lambda_sg has been deleted
  - resource "aws_security_group" "lambda_sg" {
      - id                     = "sg-368e447cb221e6f93" -> null
        name                   = "lambda_sg"
        tags                   = {}
        # (8 unchanged attributes hidden)
    }

  # aws_subnet.private_subnet has been deleted
  - resource "aws_subnet" "private_subnet" {
      - id                                             = "subnet-8795bd2b20cec05ba" -> null
        tags                                           = {
            "Name" = "PrivateSubnet"
        }
        # (16 unchanged attributes hidden)
    }

  # aws_vpc.dummy_vpc has been deleted
  - resource "aws_vpc" "dummy_vpc" {
      - id                                   = "vpc-6f66b5dcc74079ff2" -> null
        tags                                 = {
            "Name" = "DummyVPC"
        }
        # (15 unchanged attributes hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the relevant attributes using
ignore_changes, the following plan may include actions to undo or respond to these changes.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with 
the following symbols:
  + create

Terraform will perform the following actions:

  # aws_api_gateway_deployment.dummy_deployment will be created
  + resource "aws_api_gateway_deployment" "dummy_deployment" {
      + created_date  = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + rest_api_id   = (known after apply)
    }

  # aws_api_gateway_integration.dummy_integration will be created
  + resource "aws_api_gateway_integration" "dummy_integration" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = (known after apply)
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # aws_api_gateway_method.dummy_method will be created
  + resource "aws_api_gateway_method" "dummy_method" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "POST"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # aws_api_gateway_resource.dummy_resource will be created
  + resource "aws_api_gateway_resource" "dummy_resource" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "upload"
      + rest_api_id = (known after apply)
    }

  # aws_api_gateway_rest_api.dummy_api will be created
  + resource "aws_api_gateway_rest_api" "dummy_api" {
      + api_key_source               = (known after apply)
      + arn                          = (known after apply)
      + binary_media_types           = (known after apply)
      + created_date                 = (known after apply)
      + description                  = "Dummy API Gateway"
      + disable_execute_api_endpoint = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + minimum_compression_size     = (known after apply)
      + name                         = "dummy_api_gateway"
      + policy                       = (known after apply)
      + root_resource_id             = (known after apply)
      + tags_all                     = (known after apply)
    }

  # aws_iam_policy_attachment.lambda_s3_policy_attachment will be created
  + resource "aws_iam_policy_attachment" "lambda_s3_policy_attachment" {
      + id         = (known after apply)
      + name       = "lambda_s3_policy_attachment"
      + policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      + roles      = [
          + "dummy_lambda_role",
        ]
    }

  # aws_iam_role.dummy_lambda_role will be created
  + resource "aws_iam_role" "dummy_lambda_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dummy_lambda_role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_lambda_function.dummy_lambda will be created
  + resource "aws_lambda_function" "dummy_lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "./lambda/lambda_function_payload.zip"
      + function_name                  = "dummy_lambda"
      + handler                        = "index.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "BUCKET_NAME" = "dummy-s3-bucket"
            }
        }

      + vpc_config {
          + ipv6_allowed_for_dual_stack = false
          + security_group_ids          = (known after apply)
          + subnet_ids                  = (known after apply)
          + vpc_id                      = (known after apply)
        }
    }

  # aws_lambda_permission.dummy_permission will be created
  + resource "aws_lambda_permission" "dummy_permission" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "dummy_lambda"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowAPIGatewayInvoke"
      + statement_id_prefix = (known after apply)
    }

  # aws_s3_bucket.dummy_bucket will be created
  + resource "aws_s3_bucket" "dummy_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "dummy-s3-bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

  # aws_security_group.lambda_sg will be created
  + resource "aws_security_group" "lambda_sg" {
      + arn                    = (known after apply)
      + description            = "Allow Lambda access"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.0.0.0/16",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = "lambda_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.private_subnet will be created
  + resource "aws_subnet" "private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "PrivateSubnet"
        }
      + tags_all                                       = {
          + "Name" = "PrivateSubnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.dummy_vpc will be created
  + resource "aws_vpc" "dummy_vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "DummyVPC"
        }
      + tags_all                             = {
          + "Name" = "DummyVPC"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  ~ api_gateway_invoke_url = "http://5iisi7tpzg.execute-api.localhost.localstack.cloud:4566/dev/upload" -> (known after apply)
  ~ dummy_api_endpoint     = "arn:aws:execute-api:us-east-1::5iisi7tpzg" -> (known after apply)
aws_vpc.dummy_vpc: Creating...
aws_iam_role.dummy_lambda_role: Creating...
aws_api_gateway_rest_api.dummy_api: Creating...
aws_s3_bucket.dummy_bucket: Creating...
aws_iam_role.dummy_lambda_role: Creation complete after 0s [id=dummy_lambda_role]
aws_iam_policy_attachment.lambda_s3_policy_attachment: Creating...
aws_iam_policy_attachment.lambda_s3_policy_attachment: Creation complete after 0s [id=lambda_s3_policy_attachment]
aws_s3_bucket.dummy_bucket: Creation complete after 0s [id=dummy-s3-bucket]
aws_vpc.dummy_vpc: Creation complete after 0s [id=vpc-5c09d2703b5d2a00b]
aws_api_gateway_rest_api.dummy_api: Creation complete after 0s [id=7vcz2cp7r8]
aws_subnet.private_subnet: Creating...
aws_security_group.lambda_sg: Creating...
aws_api_gateway_resource.dummy_resource: Creating...
aws_api_gateway_resource.dummy_resource: Creation complete after 0s [id=ecn8mgneyi]
aws_api_gateway_method.dummy_method: Creating...
aws_api_gateway_method.dummy_method: Creation complete after 0s [id=agm-7vcz2cp7r8-ecn8mgneyi-POST]
aws_subnet.private_subnet: Creation complete after 0s [id=subnet-fdee6d07405abc9a7]
aws_security_group.lambda_sg: Creation complete after 1s [id=sg-fa689ef578a4f33c2]
aws_lambda_function.dummy_lambda: Creating...
aws_lambda_function.dummy_lambda: Still creating... [10s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [20s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [30s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [40s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [50s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [1m0s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [1m10s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [1m20s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [1m30s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [1m40s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [1m50s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [2m0s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [2m10s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [2m20s elapsed]
aws_lambda_function.dummy_lambda: Still creating... [2m30s elapsed]
aws_lambda_function.dummy_lambda: Creation complete after 2m38s [id=dummy_lambda]
aws_lambda_permission.dummy_permission: Creating...
aws_api_gateway_integration.dummy_integration: Creating...
aws_lambda_permission.dummy_permission: Creation complete after 0s [id=AllowAPIGatewayInvoke]
aws_api_gateway_integration.dummy_integration: Creation complete after 0s [id=agi-7vcz2cp7r8-ecn8mgneyi-POST]
aws_api_gateway_deployment.dummy_deployment: Creating...
aws_api_gateway_deployment.dummy_deployment: Creation complete after 0s [id=yfzjoip0eq]

Apply complete! Resources: 13 added, 0 changed, 0 destroyed.

Outputs:

api_gateway_invoke_url = "http://7vcz2cp7r8.execute-api.localhost.localstack.cloud:4566/dev/upload"
dummy_api_endpoint = "arn:aws:execute-api:us-east-1::7vcz2cp7r8"
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ● ?     


/mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ●  git add .                   ✔  Ubu  10:24:30 
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ✚  git commit -m "made couple of adjustments fixes to the LocalStack"
[main 613e3fe] made couple of adjustments fixes to the LocalStack
 1 file changed, 11 insertions(+)
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main ↑1  git push origin main --force

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 320 bytes | 15.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/gelson12/save_sent_picture_to_S3.git
   c9175dc..613e3fe  main -> main
 /mnt/c/Users/Gelson/Downloads/save_sent_picture_to_S3   main   │


  Reminder: if you willing to test my work and since i am not using real AWS resources add a local workaround by setting environment variable (this is important for Terraform to talk to LocalStack S3 properly):
│


Security RISK REMINDER:I am well aware that it is a security risk to commit terraform.tfstate and terraform.tfstate.backup to the Git repository, especially a public one.
Because:
Terraform state files can contain sensitive data, such as:

IAM role ARNs and secrets

Plaintext variables like:

AWS access keys (if hardcoded, which is discouraged)

Environment variables (e.g., DB passwords, S3 bucket names)

Resource metadata that might help an attacker understand your architecture

Even if no secrets are in there right now, future changes can unintentionally expose sensitive values — and the Git history will retain that.


However because I am using LocalStack to simulate AWS resources logically the security risks would not apply

However these are the steps i would have taken to mitigate this risks

Best Practice

Add to .gitignore:
Add the following to your .gitignore:

terraform.tfstate
terraform.tfstate.backup
*.tfstate*
Remove from Git history (if already committed):

If already pushed them:

git rm --cached terraform.tfstate terraform.tfstate.backup
echo '*.tfstate*' >> .gitignore
git add .gitignore
git commit -m "Remove state files from repo and add to .gitignore"
git push